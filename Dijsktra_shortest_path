class Solution:
  def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
    edges = collection.defaultdict(list)
  
    for u, v, w in times:
      edges[u].append((v, w))
    minHeap = [(0, k)]
    visit = set()
    t = 0
   
    while minHeap:
      w1, n1, = heapq.heappop(minHeap)
      if n1 in visit:
        continue
      vist.add(n1)
      t = max(t, w1)
     
      for n2, w2 in edges[n1]:
        if n2 not in visit:
      #keeps track of the distance w1 + w2
          heapq.heappush(minHeap, (w1 + w2, n2))
       
    return t if len(visit) == n else -1
  



#Given time = [[2,1,1], [2,3,1], [3,4,1]], n = 4, k=2
#Djikstra uses BFS, mini heap O(log n)
#time complexity O(E * logV)
#https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/
#https://www.youtube.com/watch?v=EaphyqKU4PQ
